library(tidyverse)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
View(ipip)
help(gather)
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>%
gather(key = "trait", value = "score", A_1:O_10)
View(ipip.l)
help(separate)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate(trait, c(trait, item), sep = '_')
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate(trait, c("trait", item), sep = '_')
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate("trait", c("trait", "item"), sep = '_')
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>%
group_by(RID, trait) %>%
mutate(avg = mean(score))
View(ipip.comp)
help(factor)
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer)
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer, ~factor(.))
View(ipip.comp)
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels = c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>%
gather(key = "trait", value = "score", A_1:O_10)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate("trait", c("trait", "item"), sep = '_')
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>%
group_by(RID, trait) %>%
mutate(trait_avg = mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels = c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem= sd(mean.trait/sqrt(n-1)))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem= sd(trait_avg/sqrt(n-1)))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n = length(unique(RID))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n = length(unique(ipip.comp$RID))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem= sd(trait_avg/sqrt(n-1)))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n)))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n <- length(unique(ipip.comp$RID))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n <- length(unique(ipip.comp$RID))
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1)))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI = case_when(
BMI < 18.5 ~ 'underweight',
BMI < 25 ~ 'healthy',
BMI < 30 ~ 'overweight',
TRUE ~ 'obese'
))
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>%
gather(key = "trait", value = "score", A_1:O_10)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate("trait", c("trait", "item"), sep = '_')
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>%
group_by(RID, trait) %>%
mutate(trait_avg = mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels = c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n <- length(unique(ipip.comp$RID))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1))) # ERROR BARS ARE TOO SMALL
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1)))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI_cat = case_when(
BMI < 18.5 ~ 'underweight',
BMI < 25 ~ 'healthy',
BMI < 30 ~ 'overweight',
TRUE ~ 'obese'
))
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels = c('underweight', 'healthy',
'overweight','obese'))
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels = c('underweight', 'healthy',
'overweight','obese'))
View(ipip.comp)
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(RID, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(RID, BMI_cat) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg/sqrt(n-1)))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
ggsave('figures/BMI.pdf',units='in',width=7,height=5)
?cor
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>%
mutate(corrcoef = cor(age, trait_avg))
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(trait) %>%
mutate(corrcoef = cor(age, trait_avg))
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
n
len(unique(BMI_cat))
length(unique(pip.comp$BMI_cat))
length(unique(ipip.comp$BMI_cat))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n-1)) # ERROR BARS ARE TOO SMALL
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n)) # ERROR BARS ARE TOO SMALL
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n-1))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n-1))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
library(tidyverse)
# load in the data
ipip <- read_csv('ipip50_sample.csv')
# The data is in wide format (i.e., each row is separate participant with
# columns for different measures) and we need it in long format. Convert
# to long format with a gather command on the trait items (A_1...O_10):
# **HINT: The long format data set should have 42000 rows**
ipip.l <- ipip %>%
gather(key = "trait", value = "score", A_1:O_10)
# We need a column that identifies rows as belonging to a specific trait,
# but the column you created based on the trait items includes both trait
# and item (e.g., A_1, but we want A in a separate column from item 1).
# Make this happen with a separate command:
ipip.l <- ipip.l %>%
separate("trait", c("trait", "item"), sep = '_')
# Calculate averages for each participant (coded as RID) and trait:
ipip.comp <- ipip.l %>%
group_by(RID, trait) %>%
mutate(trait_avg = mean(score))
# One last thing, our exercise variable is all out of order. Because it was read
# in as a character string, it is in alphabetical order. Let's turn it into a
# factor and reorder the levels according to increasing frequency. Do this by
# using the factor command and its levels argument:
ipip.comp$exer <- factor(ipip.comp$exer,
levels = c('veryRarelyNever', 'less1mo',
'less1wk','1or2wk','3or5wk','more5wk'))
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
n <- length(unique(ipip.comp$RID))
exer.avg <- ipip.comp %>%
group_by(exer, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n)) # ERROR BARS ARE TOO SMALL
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp <- ipip.comp %>%
mutate(BMI_cat = case_when(
BMI < 18.5 ~ 'underweight',
BMI < 25 ~ 'healthy',
BMI < 30 ~ 'overweight',
TRUE ~ 'obese'
))
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels = c('underweight', 'healthy',
'overweight','obese'))
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat, trait) %>%
mutate(avg = mean(trait_avg)) %>%
mutate(sem = sd(trait_avg)/sqrt(n))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
ggsave('figures/BMI.pdf',units='in',width=7,height=5)
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(trait) %>%
mutate(corrcoef = cor(age, trait_avg))
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
ggsave('figures/age.pdf',units='in',width=4,height=5)
